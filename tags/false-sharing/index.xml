<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>false sharing on Blog Zone</title>
    <link>https://shifengbin.github.io/tags/false-sharing/</link>
    <description>Recent content in false sharing on Blog Zone</description>
    <image>
      <title>Blog Zone</title>
      <url>https://shifengbin.github.io/images/cover.jpg</url>
      <link>https://shifengbin.github.io/images/cover.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 22 Jun 2022 15:04:38 +0800</lastBuildDate><atom:link href="https://shifengbin.github.io/tags/false-sharing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>false sharing</title>
      <link>https://shifengbin.github.io/posts/cpu/falsesharing/</link>
      <pubDate>Wed, 22 Jun 2022 15:04:38 +0800</pubDate>
      
      <guid>https://shifengbin.github.io/posts/cpu/falsesharing/</guid>
      <description>false sharing我们一般说的是多核的问题,这个问题主要出现在CPU的缓存上,我们知道CPU有多级缓存,而CPU缓存单单位是行(主流一个缓存行是64Byte, 也就是8个int64)
CPU加载缓存 当我们要操作一个变量A时会把A附近的64个字节都加载到缓存行中(空间局部性原理),这样在CPU的缓存里操作时要比在内存中要快
多核CPU缓存问题 在多核心中每个CPU核心都有自己的缓存,如果A和B变量是挨着的, 当CPU1要写A变量, CPU2读变量B, 因为AB挨着,CPU1和CPU2都把它们加载到自己的缓存中,并且AB在同一个缓存行中,CPU1改了A导致了CPU2中B缓存失效,CPUB就得重新从内存中加载缓存
这种情况就是&amp;quot;假共享&amp;quot;/&amp;ldquo;伪共享&amp;rdquo;/&amp;ldquo;false sharing&amp;rdquo;
说白了就是,CPU各自都有一份,因为邻近变量修改导致了其他核心缓存失效
例子 CASE1 type FS struct { X int64 Y int64 } func share() { var a FS wg := sync.WaitGroup{} wg.Add(2) start := time.Now() go func() { for i := 0; i &amp;lt; 100000000; i++ { a.X++ } wg.Done() }() go func() { for i := 0; i &amp;lt; 100000000; i++ { a.Y++ } wg.Done() }() wg.</description>
    </item>
    
  </channel>
</rss>
