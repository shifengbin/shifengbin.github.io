<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>排队理论 on Blog Zone</title>
    <link>https://shifengbin.github.io/tags/%E6%8E%92%E9%98%9F%E7%90%86%E8%AE%BA/</link>
    <description>Recent content in 排队理论 on Blog Zone</description>
    <image>
      <title>Blog Zone</title>
      <url>https://shifengbin.github.io/images/cover.jpg</url>
      <link>https://shifengbin.github.io/images/cover.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 21 Jun 2022 22:44:01 +0800</lastBuildDate><atom:link href="https://shifengbin.github.io/tags/%E6%8E%92%E9%98%9F%E7%90%86%E8%AE%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>利特尔法则(等候理论,排队理论)</title>
      <link>https://shifengbin.github.io/posts/math/lite_rule/</link>
      <pubDate>Tue, 21 Jun 2022 22:44:01 +0800</pubDate>
      
      <guid>https://shifengbin.github.io/posts/math/lite_rule/</guid>
      <description>&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://shifengbin.github.io/images/780.jpg&#34; alt=&#34;head&#34;  /&gt;
&lt;/p&gt;
&lt;h2 id=&#34;定义&#34;&gt;定义&lt;/h2&gt;
&lt;p&gt;在一个稳定的系统中，长期的平均顾客人数（L），等于长期的有效抵达率（λ），乘以顾客在这个系统中平均的等待时间（W）；
或者，我们可以用一个代数式来表达：
$L=λW$&lt;/p&gt;
&lt;p&gt;用白话说的话就是,在W时间内最多排多少人,能够让最后一个人也能在W时间内完成服务,也就是第一个人恰好出去,最后一个人恰好进来,这样最后一个人也能在W时间内出去&lt;/p&gt;
&lt;h2 id=&#34;案例&#34;&gt;案例&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://shifengbin.github.io/images/little_law.jpg&#34; alt=&#34;little law&#34;  /&gt;
&lt;/p&gt;
&lt;p&gt;就是说L的最后一名也可以在W时间内完成服务,按图上例子来说,就是4分钟内能同时服务多少个顾客
因为顾客的进入速度是2, 所以4分钟内最多也就是8个&lt;/p&gt;
&lt;p&gt;如果进如速度是10那么4分钟就是40个&lt;/p&gt;
&lt;h2 id=&#34;类比服务请求&#34;&gt;类比服务请求&lt;/h2&gt;
&lt;p&gt;如果一个请求的响应时长是1s, 系统的QPS是10/s, 那么系统同时处理请求的最佳个数是 10/s * 1s = 10个
如果系统里同时请求数超过10个,那么就会造成响应时间延长&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
