<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>编译指令 on Blog Zone</title>
    <link>https://shifengbin.github.io/tags/%E7%BC%96%E8%AF%91%E6%8C%87%E4%BB%A4/</link>
    <description>Recent content in 编译指令 on Blog Zone</description>
    <image>
      <title>Blog Zone</title>
      <url>https://shifengbin.github.io/images/cover.jpg</url>
      <link>https://shifengbin.github.io/images/cover.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 07 Mar 2023 10:50:47 +0800</lastBuildDate><atom:link href="https://shifengbin.github.io/tags/%E7%BC%96%E8%AF%91%E6%8C%87%E4%BB%A4/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go 编译指令build</title>
      <link>https://shifengbin.github.io/posts/go/build/</link>
      <pubDate>Tue, 07 Mar 2023 10:50:47 +0800</pubDate>
      
      <guid>https://shifengbin.github.io/posts/go/build/</guid>
      <description>go:build 是 Go 1.17 版本中引入的一个构建标记，用于根据不同的条件控制代码的编译。go:build 格式如//go:build &amp;lt;标记表达式&amp;gt;, 1.17之前使用+build的方式,这里我们介绍更强大的的go:build.
表达式可以包含由 ||、&amp;amp;&amp;amp; 和 ! 运算符和括号组合的选项,含义与 Go 语言中相同.
构建约束可以出现在任何类型的源文件中（不仅仅是 Go 文件），但是它们必须出现在文件的顶部附近，仅由空行和其他行注释分隔。这些规则意味着在 Go 文件中，构建约束必须出现在包声明之前。
例如，下面的构建约束将约束一个文件在满足“linux”和“386”约束条件或在满足“darwin”条件且未满足“cgo”条件时进行构建：//go:build (linux &amp;amp;&amp;amp; 386) || (darwin &amp;amp;&amp;amp; !cgo)
自定义tag
//go:build atest
当我们使用go build -tags atest的情况下会编译此文件,否则不会编译
控制go版本
//go:build go1.17 指定当前文件&amp;gt;=go1.17才编译
//go:build go1.17 &amp;amp;&amp;amp; go1.20 版本&amp;gt;= go1.17 并且&amp;lt;= go1.20</description>
    </item>
    
    <item>
      <title>go 编译指令Linkname</title>
      <link>https://shifengbin.github.io/posts/go/linkname/</link>
      <pubDate>Fri, 24 Feb 2023 14:35:25 +0800</pubDate>
      
      <guid>https://shifengbin.github.io/posts/go/linkname/</guid>
      <description>go:linkename是go的编译指令,可以在一个包中使用另一个包中的非导出函数或变量
具体使用方法举例
在pkg1包中有个未导出的函数add
package pkg1 func add(a, b int) int { return a + b } 在pkg2中想要使用pkg1.add,正常来说add开头是小写是不能被另一个包使用的,这时候我们想要在另一个包中使用就有两种方法:
在pkg1中定义一个可以导出的函数,这种就是在写个Add函数包裹一下,这种就不举例了 在pkg2中使用linkname编译指令修改函数或变量的名称和可见性(不太建议) 这里我们举例第二种
package pkg2 import ( _ &amp;#34;goasm/pkg1&amp;#34; //需要引入pkg1, 让pkg1参与代码编译,否则编译器找不到, 这句也可以写在别的文件中,只要让pkg1参与编译就行, relocation target goasm/pkg1.add not defined _ &amp;#34;unsafe&amp;#34; //编译器要求导入unsafe包,否则不能使用linkname指令 ) //下面就是linkname编译指令使用方法, 在函数声明上添加注释, 其中pkg1_add是函数名称, goasm/pkg1.add 是要连接的函数, 这句指令的效果就是,调用pkg1_add就是在调用goasm/pkg1包中的add函数 //go:linkname pkg1_add goasm/pkg1.add func pkg1_add(a, b int) int func Add2(a, b int) int { return pkg1_add(a, b) } 总结: go:linkname的使用是依赖于编译器的实现，因此使用时需要慎重考虑其可维护性和可移植性。 总之了解就好,不是迫不得已不要真的使用</description>
    </item>
    
  </channel>
</rss>
