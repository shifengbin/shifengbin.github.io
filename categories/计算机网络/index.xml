<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>计算机网络 on Blog Zone</title>
    <link>https://shifengbin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in 计算机网络 on Blog Zone</description>
    <image>
      <title>Blog Zone</title>
      <url>https://shifengbin.github.io/images/cover.jpg</url>
      <link>https://shifengbin.github.io/images/cover.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 02 Aug 2022 11:06:49 +0800</lastBuildDate><atom:link href="https://shifengbin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AMQP 0-9-1协议</title>
      <link>https://shifengbin.github.io/posts/net/amqp/</link>
      <pubDate>Tue, 02 Aug 2022 11:06:49 +0800</pubDate>
      
      <guid>https://shifengbin.github.io/posts/net/amqp/</guid>
      <description>&lt;h1 id=&#34;约定&#34;&gt;约定&lt;/h1&gt;
&lt;p&gt;下面出现的无特殊说明都是按下面对应关系&lt;/p&gt;
&lt;p&gt;Publishers(发布者/生产者)&lt;/p&gt;
&lt;p&gt;Consumers(消费者)&lt;/p&gt;
&lt;p&gt;Exchanges(交换机)&lt;/p&gt;
&lt;p&gt;Broker(中间件)&lt;/p&gt;
&lt;p&gt;Queues(队列)&lt;/p&gt;
&lt;p&gt;Bingdings(绑定)&lt;/p&gt;
&lt;h1 id=&#34;amqp是什么&#34;&gt;AMQP是什么&lt;/h1&gt;
&lt;p&gt;AMQP是Advanced Message Queuing Protocol的缩写,高级消息队列协议,是一种消息传递协议&lt;/p&gt;
&lt;h1 id=&#34;中间件和角色&#34;&gt;中间件和角色&lt;/h1&gt;
&lt;p&gt;消息中间件从Publishers(发布者/生产者)接收消息,路由到Consumers(消费者)&lt;/p&gt;
&lt;p&gt;因为AMQP是网络协议, 发布者,消费者,中间件能够在不同的机器上.&lt;/p&gt;
&lt;h1 id=&#34;amqp模型简介&#34;&gt;AMQP模型简介&lt;/h1&gt;
&lt;p&gt;AMQP模型有下面的视角:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;消息被发布到交换机(exchange,通常被比作邮局或邮箱)&lt;/li&gt;
&lt;li&gt;交换机(exchanges)根据绑定(bindings)规则把消息复制到队列(queues)&lt;/li&gt;
&lt;li&gt;中间件(borker)把消息投递到订阅队列或者从队列中拉取的消费者(consumers)
&lt;img loading=&#34;lazy&#34; src=&#34;https://shifengbin.github.io/images/hello-world-example-routing.png&#34; alt=&#34;view&#34;  /&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当一个消息发布时, 生产者可以设置一些消息属性(消息元数据meta data).一些元数据被中间件使用,剩下其他的被不透明发送到中间件给应用程序使用.&lt;/p&gt;
&lt;p&gt;网络是不可靠的,应用也有可能处理消息失败,&lt;code&gt;AMQP 0-9-1&lt;/code&gt;有一个消息应答(acknowledgements)的概念:当一个消息派发给消费者,消费者会通知中间件,可以自动执行或者开发者选择执行.当使用消息确认时,收到消息的通知就会从队列里删除该消息.&lt;/p&gt;
&lt;p&gt;在某些情况,比如一个消息无法被路由,消息将会返回给生产者,丢弃,或者如果中间件实现一个扩展放入死信队列.生产者通过发布消息携带某些参数来处理这些情况.&lt;/p&gt;
&lt;p&gt;队列(queue)、交换机(exchanges)和绑定(bingdings)统称为AMQP实体.&lt;/p&gt;
&lt;h1 id=&#34;amqp是一个可编程的协议&#34;&gt;AMQP是一个可编程的协议&lt;/h1&gt;
&lt;p&gt;AMQP是一种可编程协议，AMQP的实体和路由方案主要由应用程序自己定义，而不是由中间件管理员定义.因此，为声明队列和交换机、定义它们之间的绑定、订阅队列等操作做出了规定.&lt;/p&gt;
&lt;p&gt;这给应用程序开发者很大的自由,但是这也要求他们意识到潜在的定义冲突,在实践中定义冲突很少，通常是配置错误。&lt;/p&gt;
&lt;p&gt;应用定义他们需要的实体,定义必要的路由规则和不在使用时删除实体&lt;/p&gt;
&lt;h1 id=&#34;交换机和交换机类型&#34;&gt;交换机和交换机类型&lt;/h1&gt;
&lt;p&gt;交换机是向其发送消息的AMQP实体,交换机接收消息并将其路由到零个或多个队列中。使用的路由算法取决于交换机类型和绑定,AMQP协议提供四种交换机类型:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;交换机类型&lt;/th&gt;
          &lt;th&gt;默认名称&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;Direct exchange(直接交换机)&lt;/td&gt;
          &lt;td&gt;(Empty string) and amq.direct&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Fanout exchange(扇出交换机)&lt;/td&gt;
          &lt;td&gt;amq.fanout&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Topic exchange(主题交换机)&lt;/td&gt;
          &lt;td&gt;amq.topic&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Headers exchange(头交换机)&lt;/td&gt;
          &lt;td&gt;amq.match (and amq.headers in RabbitMQ)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;除了交换机类型之外，交换机还使用许多属性来声明，其中最重要的是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Name (名称)&lt;/li&gt;
&lt;li&gt;Durability  (中间件重启后持久化)&lt;/li&gt;
&lt;li&gt;Auto-delete (最后一个队列解除绑定自动删除)&lt;/li&gt;
&lt;li&gt;Arguments (参数,可选的, 由插件和中间件特定功能使用)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;交换机可以是持久的或者是临时的,持久性交换机在中间件重启后仍能存在，而暂时性交换机则不能.并非所有场景和用例都要求交换机持久化.&lt;/p&gt;
&lt;h1 id=&#34;默认交换机&#34;&gt;默认交换机&lt;/h1&gt;
&lt;p&gt;默认交换机是一个没有名称预定义在broker的直接交换机(direct exchange),它有一个特殊的特性，这使得它对于简单的应用程序非常有用:每个被创建的队列都会用和队列名称相同的路由键(routing key)自动绑定默认交换机.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>计算机网络简要概述</title>
      <link>https://shifengbin.github.io/posts/net/summary/</link>
      <pubDate>Mon, 04 Jul 2022 21:10:39 +0800</pubDate>
      
      <guid>https://shifengbin.github.io/posts/net/summary/</guid>
      <description>&lt;h1 id=&#34;计算机网络分层&#34;&gt;计算机网络分层&lt;/h1&gt;
&lt;p&gt;市面上对网络分层主要是有三种分层&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;七层&lt;/th&gt;
          &lt;th&gt;五层&lt;/th&gt;
          &lt;th&gt;四层&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;应用层&lt;/td&gt;
          &lt;td&gt;应用层&lt;/td&gt;
          &lt;td&gt;应用层&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;表示层&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;会话层&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;传输层&lt;/td&gt;
          &lt;td&gt;传输层&lt;/td&gt;
          &lt;td&gt;传输层&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;网络层&lt;/td&gt;
          &lt;td&gt;网络层&lt;/td&gt;
          &lt;td&gt;网络层&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;数据链路层&lt;/td&gt;
          &lt;td&gt;数据链路层&lt;/td&gt;
          &lt;td&gt;网络接口层&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;物理层&lt;/td&gt;
          &lt;td&gt;物理层&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;每层的职责&#34;&gt;每层的职责&lt;/h1&gt;
&lt;h2 id=&#34;物理层&#34;&gt;物理层&lt;/h2&gt;
&lt;p&gt;提供物理介质,电压信号等功能&lt;/p&gt;
&lt;h2 id=&#34;数据链路层&#34;&gt;数据链路层&lt;/h2&gt;
&lt;p&gt;提供P2P传输 (点对点的, 比如一个路由器到另一个路由器)&lt;/p&gt;
&lt;h2 id=&#34;网络层&#34;&gt;网络层&lt;/h2&gt;
&lt;p&gt;提供E2E传输 (Endpoint to Endpoint,两个端点的传输,中间可能经过若干个路由器,注意区别P2P, E2E &amp;gt; P2P)&lt;/p&gt;
&lt;h2 id=&#34;传输控制层&#34;&gt;传输控制层&lt;/h2&gt;
&lt;p&gt;提供进程到进程的传输(端口到端口的传输)&lt;/p&gt;
&lt;h2 id=&#34;应用层&#34;&gt;应用层&lt;/h2&gt;
&lt;p&gt;应用自定义个协议&lt;/p&gt;
&lt;p&gt;每一层都是通过下层对上层提供接口的形式来提供服务&lt;/p&gt;
&lt;h1 id=&#34;常用网络设备&#34;&gt;常用网络设备&lt;/h1&gt;
&lt;h2 id=&#34;交换机&#34;&gt;交换机&lt;/h2&gt;
&lt;p&gt;交换机工作在数据链路层, 通过mac地址进行转发, 全双工网络设备, 可以隔离碰撞域, 减少链路上的信号碰撞,提高链路网络利用率&lt;/p&gt;
&lt;h2 id=&#34;路由器&#34;&gt;路由器&lt;/h2&gt;
&lt;p&gt;路由器工作在网际层, 通过ip进行转发, 全双工网络设备, 可以隔离广播域(广播不能通过路由器)&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
