<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Blog Zone</title>
    <link>https://shifengbin.github.io/posts/</link>
    <description>Recent content in Posts on Blog Zone</description>
    <image>
      <url>https://shifengbin.github.io/images/cover.jpg</url>
      <link>https://shifengbin.github.io/images/cover.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 20 Jun 2022 17:44:00 +0800</lastBuildDate><atom:link href="https://shifengbin.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>指数加权平均(EWA)</title>
      <link>https://shifengbin.github.io/posts/math/ewa/</link>
      <pubDate>Mon, 20 Jun 2022 17:44:00 +0800</pubDate>
      
      <guid>https://shifengbin.github.io/posts/math/ewa/</guid>
      <description>EWA是什么 EWA是以指数式递减加权的移动平均, 是一种近似平均(也可以理解为一段时间的平均值,因为越久的数据对当前的影响越小,小到一定程度就可以忽略,可以理解为一段时间的平均值)
基本公式 $V_t=βV_{t-1} + (1-β)R_t$
$V_t$ 代表t时刻的平均值
$βV_{t-1}$代表t-1时刻的平均值
$R_t$ 是t时刻的真实值
$β$ 范围在0-1之间
平均天数为 $N=\frac {1} {1-β}$
$β=0.5$则平均个数N=2 $β=0.9$则平均个数N=$\frac{1}{1-0.9}=10$ 也就是平均最近10次的
可以做什么 计算$\frac {1} {1-β}$个数据的平均值,减少噪声影响,平滑数据
好处比其他平均的好处是 不需要保存最近N次的数据,只需要保存上次计算的平均值</description>
    </item>
    
    <item>
      <title>hugo 支持github评论</title>
      <link>https://shifengbin.github.io/posts/hugo/comments/</link>
      <pubDate>Mon, 20 Jun 2022 15:02:41 +0800</pubDate>
      
      <guid>https://shifengbin.github.io/posts/hugo/comments/</guid>
      <description> 先在utteranc的configuration部分找到安装utteranc app到仓库,选择一个仓库并安装 在页面Enable Utterances部分找到js代码 在自己用的主题上找到关于comment的layout,把js代码添加到里面 运行 </description>
    </item>
    
    <item>
      <title>go sync包之singleflight原理</title>
      <link>https://shifengbin.github.io/posts/go_source/sync_singleflight/</link>
      <pubDate>Sun, 19 Jun 2022 22:02:23 +0800</pubDate>
      
      <guid>https://shifengbin.github.io/posts/go_source/sync_singleflight/</guid>
      <description>singlefight是什么 singlefight 直译为&amp;quot;单飞&amp;quot;(雅名到底是啥我也不知道), 顾名思义就是只有一个跑了, 是用来对同一资源控制并发 多个goroutine访问同一个资源时,只有一个goroutine真正的进行访问,其他goroutine等待这一个goroutine返回后共享返回结果
为什么出现singlefight 这个包 上面是什么中已经交代,是为了控制访问同一个资源的并发数,举个例子:假设有个接口访问数据库中id为1的一条数据,如果我们没有控制并发,那么来一百个并发访问这个数据,那么这一百个请求全部取请求数据库(即使有缓存也是全部请求缓存)
如果我们使用了singlefight那么,100个并发讲只有一个请求去数据库,其他99个全部共享那1个返回的结果
怎么用 var g = singleflight.Group{} //初始化了一个singleflight func SharedRes(id int) (int, error) { key := fmt.Sprintf(&amp;#34;id:%d&amp;#34;, id) //同一个group上,相同key的,只会执行一次,也就是说用key标识一个共享资源 ret, err, _ := g.Do(key, func() (interface{}, error) { //调用共享资源 time.Sleep(time.Second) //这里睡1s是模拟资源执行的延迟 fmt.Println(&amp;#34;xxxx&amp;#34;) return 1, nil }) return ret.(int), err } func SingleFlight() { wg := sync.WaitGroup{} //为了等100个goroutine执行完,开启了一个WaitGroup for i := 0; i &amp;lt; 100; i++ { wg.Add(1) go func() { //模拟并发 ret, err := SharedRes(1) fmt.</description>
    </item>
    
    <item>
      <title>ubuntu 连接WIFI</title>
      <link>https://shifengbin.github.io/posts/pi/connect_wifi/</link>
      <pubDate>Sat, 18 Jun 2022 21:15:30 +0800</pubDate>
      
      <guid>https://shifengbin.github.io/posts/pi/connect_wifi/</guid>
      <description> 本地环境为 ubuntu 22.04
进入 /etc/netplan/ 文件夹 cd /etc/netplan/ 编辑里面唯一一个文件，大概是：50-cloud-init.yaml sudo vim 50-cloud-init.yaml, 需要使用sudo,因为这个文件是root用户的问题件,或者把文件选项改成可写的 添加WIFI配置 network: ethernets: eth0: dhcp4: true optional: true wifis: # &amp;lt;----添加wifi配置节点 wlan0: dhcp4: true optional: true access-points: &amp;#34;wifi_name&amp;#34;: #&amp;lt;---- 这里填写填写你要连接的wifi名称 password: &amp;#34;xxxxx&amp;#34; #&amp;lt;-------这里填写wifi密码 version: 2 执行命令,生成网络配置sudo netplan generate 使网络配置生效sudo netplan apply </description>
    </item>
    
    <item>
      <title>Mac用网线连接树莓派</title>
      <link>https://shifengbin.github.io/posts/pi/pi_connect_mac/</link>
      <pubDate>Sat, 18 Jun 2022 16:12:36 +0800</pubDate>
      
      <guid>https://shifengbin.github.io/posts/pi/pi_connect_mac/</guid>
      <description> 首先 打开mac的系统偏好设置-&amp;gt;共享-&amp;gt;互联网共享（USB 10/100/1000 LAN） 并打开共享 打开终端查看树莓派分配的IP 使用arp -a 里面有个带有bridgeXXX的 IP 使用ssh命令 远程连接 </description>
    </item>
    
  </channel>
</rss>
